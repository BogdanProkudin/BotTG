import TelegramBot from 'node-telegram-bot-api';
import { generateCalendar, getMonthName } from './calendar.js';
import { MongoClient } from 'mongodb';
import Robokaska from 'robokassa';
import { Calendar } from 'telegram-inline-calendar';
import { getAvailableShippingTime } from './avaliableShippingTime.js';
import cors from 'cors';
import { Readable } from 'stream';

import dotenv from 'dotenv';
dotenv.config();
import express from 'express';

import crypto from 'crypto';
import { startAddProcess, cancelProcess, startEditProcess } from './processes/processes.js';
import validateAddress, { getAddressFromCoordinates } from './validateAddress.js';
import axios from 'axios';
import { console } from 'inspector';

// –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const BOT_TOKEN = process.env.BOT_TOKEN;
const app = express();
console.log('üü¢ –§–∞–π–ª bot.js –Ω–∞—á–∞–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ'); // –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∏ —Å–∫—Ä–∏–ø—Ç –≤–æ–æ–±—â–µ
app.use(cors());
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.get('/result', (req, res) => {
  console.log('Hello World!');

  return res.status(200).json({ message: 'Transaction completed successfully' });
});
app.get('/fail', (req, res) => {
  return res.status(200).json({ message: 'Transaction failed' });
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã (SignatureValue)
function calculateSignature(OutSum, InvId, password2, additionalParams = '') {
  const baseString = `${OutSum}:${InvId}:${password2}`;
  const hash = md5(baseString);
  return hash;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç Robokassa –Ω–∞ ResultURL

let db;
let collectionUser;
let collectionProduct;
let collectionCategory;

console.log('üü° –ü—ã—Ç–∞—é—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB...');
MongoClient.connect(
  'mongodb+srv://quard:Screaper228@cluster0.zyg0fil.mongodb.net/?retryWrites=true&w=majority',
  {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  }
)
  .then((client) => {
    db = client.db();
    collectionUser = db.collection('dbUser');
    collectionProduct = db.collection('db1');
    collectionCategory = db.collection('flower-category');
    console.log('Connected to MongoDB');
  })
  .catch((err) => {
    console.error('Error connecting to MongoDB', err);
  });

async function processPaymentNotification(req, res) {
  // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ Robokassa
  try {
    if (!req.body) {
      return res.status(400).json({ message: 'Bad request' });
    }
    const {
      OutSum,
      InvId,
      Fee,
      EMail,
      SignatureValue,
      PaymentMethod,
      IncCurrLabel,
      IsTest,
      ...additionalParams
    } = req.body;
    console.log(req.body);

    // –ü–∞—Ä–æ–ª—å 2, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ö—ç—à–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å)
    const password2 = 'VPXkrnNyoI9865vDif2k';
    if (!collectionUser) {
      return;
    }

    const invIdNumber = Number(InvId);
    const user = await collectionUser.findOne({ invId: invIdNumber });

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
    let additionalParamsString = '';
    if (Object.keys(additionalParams).length > 0) {
      additionalParamsString = Object.entries(additionalParams)
        .map(([key, value]) => `${key}=${value}`)
        .join(':');
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ö—ç—à
    const calculatedHash = await calculateSignature(
      OutSum,
      InvId,
      password2,
      additionalParamsString
    );
    console.log(calculatedHash, SignatureValue);
    if (!calculatedHash) {
      return res.status(400).json({ message: 'Bad request' });
    }
    if (!SignatureValue) {
      return res.status(400).json({ message: 'Bad request' });
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞
    if (calculatedHash.toUpperCase() === SignatureValue.toUpperCase()) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
      if (IsTest === '1') {
        console.log(
          `–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º! –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞. InvId: ${InvId}, –°—É–º–º–∞: ${OutSum}, Email: ${EMail}`
        );
      } else {
        console.log(`–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞! InvId: ${InvId}, –°—É–º–º–∞: ${OutSum}, Email: ${EMail}`);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç Robokassa –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await res.status(200).send(`OK${InvId}`);

      const response = await axios.get(
        `https://api.telegram.org/bot${BOT_TOKEN}/getFile?file_id=${user.photo}`
      );

      const filePath = await response.data.result.file_path;

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
      const photoUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${filePath}`;
      console.log(photoUrl);
      await bot.sendMessage(
        -1002291227368,
        `‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!*\n\n` +
          `üí∞ *–¶–µ–Ω–∞:* ${user.price}\n` +
          `üìß *Email:* ${EMail}\n` +
          `üì∑ *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:* [–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ](${photoUrl})\n` +
          `üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:* ${
            user.clientNumber ? user.clientNumber : '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä'
          }\n` +
          `üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* ${
            user.recipientNumber ? user.recipientNumber : '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä'
          }\n` +
          `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${user.address ? user.address : '–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å'}\n` +
          `üìÖ *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* ${user.selectedDate ? user.selectedDate : '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞'}\n` +
          `‚è∞–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:* ${
            user.address !== '–°–∞–º–æ–≤—ã–≤–æ–∑' ? '–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏' : '–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞'
          }* ${user.time ? user.time : '–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è'}\n` +
          `üìù *–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:* ${user.postcard ? user.postcard : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
          `üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* ${
            user.extraInformation ? user.extraInformation : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
          }\n\n`,
        {
          parse_mode: 'Markdown',
        }
      );
      await bot.sendMessage(
        user.userId,
        `‚úÖ *–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!*\n\n` +
          `üí∞ *–¶–µ–Ω–∞:* ${user.price}\n` +
          `üìß *Email:* ${EMail}\n` +
          `üì∑ *–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ:* [–û—Ç–∫—Ä—ã—Ç—å —Ñ–æ—Ç–æ](${photoUrl})\n` +
          `üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–∫–∞–∑—á–∏–∫–∞:* ${
            user.clientNumber ? user.clientNumber : '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä'
          }\n` +
          `üìû *–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* ${
            user.recipientNumber ? user.recipientNumber : '–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä'
          }\n` +
          `üìç *–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:* ${user.address ? user.address : '–ù–µ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å'}\n` +
          `üìÖ *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:* ${user.selectedDate ? user.selectedDate : '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞'}\n` +
          `‚è∞ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏/–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:* ${
            user.time ? user.time : '–ù–µ —É–∫–∞–∑–∞–Ω–æ –≤—Ä–µ–º—è'
          }\n` +
          `üìù *–¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:* ${user.postcard ? user.postcard : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n` +
          `üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:* ${
            user.extraInformation ? user.extraInformation : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
          }\n\n`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']],
            resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
            one_time_keyboard: true, // –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
          },
        }
      );
      await collectionUser.updateOne(
        { userId: user.userId },
        { $set: { processType: 'finished' } }
      );
    } else {
      // –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã –Ω–µ —Å–æ–≤–ø–∞–ª–∏ ‚Äî –æ—à–∏–±–∫–∞
      console.error(`–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è InvId: ${InvId}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
      res.status(400).send('Error');
    }
  } catch (e) {
    console.log(e);
  }
}
app.post('/payment-success', processPaymentNotification);

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ
async function handlePhoto(userId, photoFileId) {
  const user = await collectionUser.findOne({ userId });
  console.log(user.step);

  if (user && user.step === 'getIndex') {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.';
  }
  if (!user || user.step !== 'getPhoto') {
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await collectionUser.updateOne({ userId }, { $set: { photo: photoFileId } });

  // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–≥ –ø—Ä–æ—Ü–µ—Å—Å–∞
  await collectionUser.updateOne({ userId }, { $set: { step: 'getPrice' } });

  return '–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞.';
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ü–µ–Ω—ã
async function handlePrice(userId, priceText) {
  const price = parseFloat(priceText);
  if (isNaN(price) || price <= 0) {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 100, 199.99';
  }

  const user = await collectionUser.findOne({ userId });
  if (!user || user.step !== 'getPrice') {
    return;
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  await collectionUser.updateOne({ userId }, { $set: { price } });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤
  const userPhoto = user.photo;
  if (user.processType === 'edit') {
    const productId = user.productId;
    await collectionProduct.updateOne(
      { _id: productId },
      {
        $set: {
          photo: userPhoto,
          price: price,
          addedAt: new Date(),
        },
      }
    );
    await collectionUser.updateOne(
      { userId },
      {
        $set: {
          isInProcess: false,
          step: null,
          processType: null,
          photo: null,
          price: null,
        },
      }
    );
    return '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!';
  }
  await collectionProduct.insertOne({
    photo: userPhoto,
    price: price,
    addedAt: new Date(),
  });

  // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
  await collectionUser.updateOne(
    { userId },
    {
      $set: {
        isInProcess: false,
        step: null,
        processType: null,
        photo: null,
        price: null,
      },
    }
  );

  return '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
async function handleEdit(userId, index) {
  const user = await collectionUser.findOne({ userId });
  if (!user || user.processType !== 'edit') {
    return;
  }

  if (isNaN(index) || index <= 0 || index > 100) {
    return '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞.';
  }
  const indexInt = parseInt(index);
  const document = await collectionProduct
    .find()
    .skip(indexInt - 1)
    .limit(1)
    .next();
  if (!document) {
    return '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
  }

  await collectionUser.updateOne(
    { userId },
    { $set: { step: 'getPhoto', productId: document._id } }
  );

  return '–ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.';
}
function md5(string) {
  return crypto.createHash('md5').update(string).digest('hex').toUpperCase();
}

// –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

function generatePaymentLink(merchantLogin, password1, invId, outSum, description, isTest = false) {
  // –§–æ—Ä–º–∏—Ä—É–µ–º JSON-–æ–±—ä–µ–∫—Ç —Å —Ñ–∏—Å–∫–∞–ª—å–Ω—ã–º —á–µ–∫–æ–º (54-–§–ó)
  const receipt = {
    items: [
      {
        name: '–ë—É–∫–µ—Ç —Ü–≤–µ—Ç–æ–≤', // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        quantity: 1, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
        sum: outSum, // –°—É–º–º–∞

        tax: 'none', // –¢–∏–ø –Ω–∞–ª–æ–≥–∞ ("none", "vat0", "vat10", "vat20" –∏ —Ç. –¥.)
      },
    ],
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–µ–∫ –≤ JSON-—Å—Ç—Ä–æ–∫—É
  const receiptString = JSON.stringify(receipt);
  console.log(receiptString);

  // URL-–∫–æ–¥–∏—Ä—É–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
  const encodedReceiptForSignature = encodeURIComponent(receiptString);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (SignatureValue)
  const signatureString = `${merchantLogin}:${outSum}:${invId}:${encodedReceiptForSignature}:${password1}`;
  const signatureValue = crypto.createHash('md5').update(signatureString).digest('hex');

  // –î–≤–∞–∂–¥—ã URL-–∫–æ–¥–∏—Ä—É–µ–º —á–µ–∫ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å—Å—ã–ª–∫–µ
  const doubleEncodedReceipt = encodeURIComponent(encodedReceiptForSignature);

  // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã
  let paymentLink = `https://auth.robokassa.ru/Merchant/Index.aspx?MerchantLogin=${merchantLogin}&OutSum=${outSum}&InvoiceID=${invId}&Description=${encodeURIComponent(
    description
  )}&SignatureValue=${signatureValue}&Receipt=${doubleEncodedReceipt}&Encoding=utf-8&Culture=ru`;

  // –í–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (isTest) {
    paymentLink += '&IsTest=1';
  }

  return paymentLink;
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

// –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ

bot.onText(/\/location/, async (msg) => {
  const chatId = msg.chat.id;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
  await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', {
    reply_markup: {
      keyboard: [
        [
          {
            text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ',
            request_location: true, // –≠—Ç–æ –∑–∞–ø—Ä–æ—Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
          },
        ],
      ],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});
bot.on('location', async (msg) => {
  const chatId = msg.chat.id;
  const { latitude, longitude } = msg.location;
  console.log('locaton');
  if (!collectionUser) {
    return;
  }
  const user = await collectionUser.findOne({ userId: chatId });
  if (!user) {
    return;
  }
  if (user.processType === 'send_location') {
    const availableTimes = await getAvailableShippingTime(user);
    const address = await getAddressFromCoordinates(latitude, longitude);
    if (
      address !==
      '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∞–¥—Ä–µ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ú–æ—Å–∫–≤–µ –∏ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ—á–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.'
    ) {
      console.log(address);
      await bot.sendMessage(
        chatId,
        `–í–∞—à –∞–¥—Ä–µ—Å: ${address}\n` + '–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏',
        {
          reply_markup: {
            keyboard: [...availableTimes, ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId: chatId },
        { $set: { address, processType: 'select_time' } }
      );
    } else {
      await bot.sendMessage(chatId, address);
    }
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }

  //   bot.sendLocation(chatId, latitude, longitude);
});
// import { getDistance } from "geolib";
// bot.onText(/\/noob/, async (msg) => {
//   async function getCoordinates(address) {
//     const url = `https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(
//       address
//     )}&format=json&limit=1`;
//     const response = await axios.get(url);

//     if (response.data.length === 0) {
//       throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${address}`);
//     }

//     const { lat, lon } = response.data[0];
//     return { latitude: parseFloat(lat), longitude: parseFloat(lon) };
//   }

//   async function calculateDistance(address1, address2) {
//     try {
//       const coord1 = await getCoordinates(address1);
//       const coord2 = await getCoordinates(address2);

//       const distanceMeters = getDistance(coord1, coord2);
//       const distanceKm = distanceMeters / 1000;

//       console.log(`–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${distanceKm.toFixed(2)} –∫–º`);
//       return distanceKm;
//     } catch (error) {
//       console.error("–û—à–∏–±–∫–∞:", error.message);
//     }
//   }

//   // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
//   calculateDistance(" —Ä—É–Ω–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ 8—Å1", " –ø–æ–¥–æ–ª—å—Å–∫–∏—Ö –∫—É—Ä—Å–∞–Ω—Ç–æ–≤ 10");
// });
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  console.log(chatId, 'chatId');
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  if (chatType === 'supergroup') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
  }

  if (!collectionUser) {
    return;
  }
  const currentUser = await collectionUser.findOne({ userId: chatId });
  if (!currentUser) {
    await collectionUser.updateOne(
      { userId: chatId },
      {
        $set: {
          isInProcess: false,
          step: null,
          processType: null,
          photo: null,
          price: null,
        },
      },
      { upsert: true }
    );
  }
  if (currentUser && currentUser.isInProcess) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.');
    return;
  }
  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
  bot.setMyCommands([
    {
      command: '/menu',
      description: '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
    },
  ]);
  console.log('start');

  await bot.sendMessage(
    chatId,
    '*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Ü–≤–µ—Ç–æ—á–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω!* üíê\n\n' +
      'üå∑ –ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Å–≤–µ–∂–∏–µ —Ü–≤–µ—Ç—ã –∏ —Å—Ç–∏–ª—å–Ω—ã–µ –±—É–∫–µ—Ç—ã.\n' +
      'üöÄ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä—è–º–æ –∫ –≤–∞–º!\n\n' +
      '–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é. \n\n' +
      '_–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!_ ‚ù§Ô∏è',
    { parse_mode: 'Markdown' }
  );

  // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
  await bot.sendMessage(chatId, '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', {
    reply_markup: {
      keyboard: [
        ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
        ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'], // –ö–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
      ],
      resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
      one_time_keyboard: true, // –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
bot.onText(/\/add/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  if (chatType === 'supergroup') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
  }
  if (!collectionUser) {
    return;
  }
  if (
    userId !== 833391720 &&
    userId !== 6103809590 &&
    userId !== 5600075299 &&
    userId !== 1941288913 &&
    userId !== 5557790556 &&
    userId !== 1218030672
  ) {
    return;
  }
  const user = await collectionUser.findOne({ userId });
  if (user && user.isInProcess) {
    await bot.sendMessage(
      chatId,
      '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.',
      {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      }
    );
    return;
  }
  const message = await startAddProcess(userId, collectionUser);

  await bot.sendMessage(chatId, message, {
    reply_markup: {
      keyboard: [['–ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit
bot.onText(/\/edit/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  if (chatType === 'supergroup') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
  }
  if (!collectionUser) {
    return;
  }
  if (
    userId !== 833391720 &&
    userId !== 6103809590 &&
    userId !== 5600075299 &&
    userId !== 1941288913 &&
    userId !== 5557790556 &&
    userId !== 1218030672
  ) {
    return;
  }
  const user = await collectionUser.findOne({ userId });
  if (user && user.isInProcess) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.');
    return;
  }
  const message = await startEditProcess(userId, collectionUser);

  await bot.sendMessage(chatId, message, {
    reply_markup: {
      keyboard: [['–ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
});

bot.onText(/\/delete/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  if (chatType === 'supergroup') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
  }
  if (!collectionUser) {
    return;
  }
  if (
    userId !== 833391720 &&
    userId !== 6103809590 &&
    userId !== 5600075299 &&
    userId !== 1941288913 &&
    userId !== 5557790556 &&
    userId !== 1218030672
  ) {
    return;
  }
  const user = await collectionUser.findOne({ userId });
  if (user && user.isInProcess) {
    await bot.sendMessage(chatId, '–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø–æ–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ.');
    return;
  }
  await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.', {
    reply_markup: {
      keyboard: [['–ù–∞–∑–∞–¥']],
      resize_keyboard: true,
      one_time_keyboard: true,
    },
  });
  await collectionUser.updateOne(
    { userId },
    {
      $set: {
        isInProcess: true,
        processType: 'delete',
      },
    },
    { upsert: true }
  );

  // collectionProduct
  //   .find()
  //   .skip(index)
  //   .limit(1)
  //   .toArray()
  //   .then((docs) => {
  //     if (docs.length > 0) {
  //       collectionProduct.deleteOne({ _id: docs[0]._id });
  //       :–£–¥–∞–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å _id:", docs[0]._id);
  //     } else {
  //       console.log("–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω");
  //     }
  //   });
});

bot.onText(/^\/reply (\d+) (.+)/s, async (msg, match) => {
  const adminId = msg.from.id;
  const userId = parseInt(match[1]); // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const replyText = match[2]; // –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞

  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    const user = await collectionUser.findOne({ userId });

    if (!user) {
      return await bot.sendMessage(adminId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤ —Ä–∞–∑–¥–µ–ª–µ –ª–∏ –æ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (user.processType === 'support') {
      await bot.sendMessage(userId, `üì¨ –û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n${replyText}`);
    } else {
      await bot.sendMessage(
        -1002572728889,
        `‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏ ${userId} –Ω–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.`
      );
    }
  } catch (err) {
    await bot.sendMessage(-1002572728889, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${err.message}`);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.on('text', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  const text = msg.text.trim();
  try {
    if (!collectionUser) {
      return;
    }
    const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
    if (chatType === 'supergroup') {
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
    }
    const user = await collectionUser.findOne({ userId });
    if (text === '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' && user.processType === 'finished') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: false, processType: null } }
      );

      await bot.sendMessage(chatId, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', {
        reply_markup: {
          keyboard: [
            ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
            ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'],
            ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
          ],
          resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
          one_time_keyboard: true, // –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        },
      });
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: false, processType: null } }
      );
      return;
    }

    if (text === '–ù–∞–∑–∞–¥' && user.processType && user.processType === 'support') {
      console.log('user –≤—ã—à–µ–ª');
    }
    if (text === '–ü–æ–¥–¥–µ—Ä–∂–∫–∞' && !user.isInProcess) {
      console.log('user –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ');
      await bot.sendMessage(
        chatId,
        'üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ù–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
        {
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );

      await collectionUser.updateOne(
        { userId },
        { $set: { processType: 'support', isInProcess: true } }
      );
    }

    if (
      text !== '–ù–∞–∑–∞–¥' &&
      user.isInProcess &&
      user.processType === 'support' &&
      text !== '/menu'
    ) {
      try {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω–∞–º
        const supportText = `‚úâÔ∏è –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
  ID: ${userId}
  –ò–º—è: ${msg.from.first_name}
  –Æ–∑–µ—Ä–Ω–µ–π–º: @${msg.from.username || '–Ω–µ—Ç'}

  –°–æ–æ–±—â–µ–Ω–∏–µ: ${text}`;

        const ADMIN_CHAT_ID = -1002572728889;

        await bot.sendMessage(ADMIN_CHAT_ID, supportText);
        await bot.sendMessage(chatId, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.');
      } catch (error) {
        await bot.sendMessage(ADMIN_CHAT_ID, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è ');
        await bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è');
      }
    }

    if (text === '–ù–∞–∑–∞–¥' && user.processType !== 'finished') {
      if (
        (user && user.processType === 'catalog_price=4000') ||
        (user && user.processType === 'catalog_price=8000') ||
        (user && user.processType === 'catalog_price=10000') ||
        (user && user.processType === 'catalog_price=10000++')
      ) {
        const message = await cancelProcess(userId, collectionUser);

        const user = await collectionUser.findOne({ userId });
        if (!user) {
          return;
        }
        const deletedPhotoIds = user.photo_to_delete;
        if (deletedPhotoIds && deletedPhotoIds.length > 0) {
          deletedPhotoIds.forEach((photoId) => {
            bot.deleteMessage(chatId, photoId);
          });
        }

        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ú–æ–Ω–æ–±—É–∫–µ—Ç—ã', '–ö–æ—Ä–∑–∏–Ω—ã'], ['–†–∞—Å–∫–∏–¥–∏—Å—Ç—ã–µ –±—É–∫–µ—Ç—ã', '–ö–æ—Ä–æ–±–∫–∏'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        await collectionUser.updateOne(
          { userId },
          { $set: { message_to_delete: null, photo_to_delete: [] } }
        );
        return;
      }
      if (user && user.processType && user.processType === 'payment') {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (user && user.processType && user.processType === 'prepare_payment') {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (user && user.processType && user.processType === 'select_date') {
        const message = await cancelProcess(userId, collectionUser);
        const user = await collectionUser.findOne({ userId });
        if (!user) {
          return;
        }
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [
              ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
              ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'],
              ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        const deletedPhotoIds = user.photo_to_delete;
        if (deletedPhotoIds && deletedPhotoIds.length > 0) {
          deletedPhotoIds.forEach((photoId) => {
            bot.deleteMessage(chatId, photoId);
          });
        }
        if (Array.isArray(user.message_to_delete) && user.message_to_delete.length > 0) {
          for (const messageId of user.message_to_delete) {
            console.log('delete message on nazad');
            await bot.deleteMessage(chatId, messageId);
          }
        } else if (typeof user.message_to_delete === 'number') {
          console.log('delete message on nazad2');

          await bot.deleteMessage(chatId, user.message_to_delete);
        }
        await collectionUser.updateOne(
          { userId },
          { $set: { message_to_delete: null, photo_to_delete: [] } }
        );
        return;
      }
      if (user && user.processType && user.processType === 'who_is_client') {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (user && user.processType && user.processType === 'client_number') {
        const message = await cancelProcess(userId, collectionUser);
        const availableTimes = getAvailableShippingTime(user);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [...availableTimes, ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        user &&
        user.processType &&
        user.processType === 'recipient_number' &&
        (user.whoIsClient === '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫' || user.whoIsClient === '2')
      ) {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–Ø', '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (user && user.processType && user.processType === 'extra_information') {
        console.log('exit');

        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        user &&
        user.processType &&
        user.processType === 'postcard' &&
        user.address === '–°–∞–º–æ–≤—ã–≤–æ–∑'
      ) {
        console.log('exit –≥–¥–µ –Ω—É–∂–Ω–æ');

        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        user &&
        user.processType &&
        user.processType === 'postcard' &&
        (user.whoIsClient === '–Ø' || user.whoIsClient === '1')
      ) {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–Ø', '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        user &&
        user.processType &&
        user.processType === 'recipient_number' &&
        user.address !== '–°–∞–º–æ–≤—ã–≤–æ–∑'
      ) {
        const message = await cancelProcess(userId, collectionUser);
        const availableTimes = getAvailableShippingTime(user);

        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [...availableTimes, ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        user &&
        user.processType &&
        user.processType === 'postcard' &&
        (user.whoIsClient === '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫' ||
          user.whoIsClient === '–Ø' ||
          user.whoIsClient === '1' ||
          user.whoIsClient === '2')
      ) {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      }
      if (
        (user && user.processType && user.processType === 'send_location') ||
        (user && user.processType && user.processType === 'enter_address') ||
        (user && user.processType && user.processType === 'select_time')
      ) {
        const message = await cancelProcess(userId, collectionUser);
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [['–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å', '–°–∞–º–æ–≤—ã–≤–æ–∑'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        return;
      } else {
        const message = await cancelProcess(userId, collectionUser);
        const user = await collectionUser.findOne({ userId });
        if (!user) {
          return;
        }
        const deletedPhotoIds = await user.photo_to_delete;
        if (deletedPhotoIds && deletedPhotoIds.length > 0) {
          deletedPhotoIds.forEach((photoId) => {
            bot.deleteMessage(chatId, photoId);
          });
        }
        if (Array.isArray(user.message_to_delete) && user.message_to_delete.length > 0) {
          for (const messageId of user.message_to_delete) {
            console.log('delete message on nazad');
            await bot.deleteMessage(chatId, messageId);
          }
        } else if (typeof user.message_to_delete === 'number') {
          console.log('delete message on nazad2');

          await bot.deleteMessage(chatId, user.message_to_delete);
        }

        await collectionUser.updateOne(
          { userId },
          { $set: { photo_to_delete: [], message_to_delete: null } }
        );
        await bot.sendMessage(chatId, message, {
          reply_markup: {
            keyboard: [
              ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
              ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'],
              ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
            ],
            resize_keyboard: true, // –î–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º–∏
            one_time_keyboard: true, // –£–±–∏—Ä–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
          },
        });
      }
    }
  } catch (e) {
    console.log('Error has to fix', e);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
bot.on('photo', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  const user = await collectionUser.findOne({ userId });

  if (user && user.step === 'getIndex') {
    return bot.sendMessage(
      chatId,
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.'
    );
  }
  if (user && user.step !== 'getPhoto') {
    return;
  }

  const photo = msg.photo[msg.photo.length - 1];
  const fileId = photo.file_id;

  const message = await handlePhoto(userId, fileId);
  await bot.sendMessage(chatId, message);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞)
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  if (!collectionUser || !collectionProduct) {
    return;
  }
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  if (chatType === 'supergroup') {
    return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
  }

  const user = await collectionUser.findOne({ userId });
  if (!user || !user.isInProcess) {
    return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
  }

  if (
    user.step === 'getPhoto' &&
    msg.text !== '–ù–∞–∑–∞–¥' &&
    msg.text &&
    msg.text !== '/add' &&
    msg.text !== '/edit'
  ) {
    setTimeout(() => bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.'), 300);
  } else if (
    user.step === 'getPrice' &&
    msg.text !== '–ù–∞–∑–∞–¥' &&
    msg.text &&
    msg.text !== '/add' &&
    msg.text !== '/edit' &&
    msg.text[0] !== '/'
  ) {
    const message = await handlePrice(userId, msg.text);
    if (message === '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 100, 199.99') {
      await bot.sendMessage(chatId, message, {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else {
      await bot.sendMessage(chatId, message, {
        reply_markup: {
          keyboard: [
            ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
            ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'],
            ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    }
  } else if (
    user.step === 'getIndex' &&
    msg.text !== '–ù–∞–∑–∞–¥' &&
    msg.text &&
    msg.text !== '/add' &&
    msg.text !== '/edit' &&
    msg.text[0] !== '/'
  ) {
    const message = await handleEdit(userId, msg.text);
    await bot.sendMessage(chatId, message);
  }
});

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const userId = msg.from.id;
  const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
  console.log(chatType);
  try {
    if (chatType === 'supergroup') {
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
    }
    if (!collectionUser || !collectionProduct) {
      console.log('collectionUser or collectionProduct is null');
      return;
    }
    const user = await collectionUser.findOne({ userId });
    if (text === '/menu' && user) {
      await bot.sendMessage(chatId, '–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', {
        reply_markup: {
          keyboard: [
            ['–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞', '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥'],
            ['–û –Ω–∞—Å', '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ', '–ù–∞—à —Å–∞–π—Ç'],
            ['–ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      if (Array.isArray(user.message_to_delete) && user.message_to_delete.length > 0) {
        for (const messageId of user.message_to_delete) {
          try {
            await bot.deleteMessage(chatId, messageId);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error.message);
          }
        }
      } else if (typeof user.message_to_delete === 'number') {
        try {
          await bot.deleteMessage(chatId, user.message_to_delete);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${user.message_to_delete}:`, error.message);
        }
      }

      if (user.photo_to_delete) {
        user.photo_to_delete.forEach((photoId) => {
          bot.deleteMessage(chatId, photoId);
        });
      }
      await collectionUser.findOneAndUpdate(
        { userId },
        {
          $set: {
            isInProcess: false,
            processType: null,
            message_to_delete: null,
            MKAD: null,
            address: null,
            clientNumber: null,
            selectedDate: null,
            whoIsClient: null,
            currentShow: null,
            recipientNumber: null,
            photo_to_delete: [],
            time: null,
            step: null,
          },
        }
      );
      return;
    }

    if (
      !user ||
      (user.isInProcess &&
        user.processType !== 'showcase' &&
        user.processType !== 'select_date' &&
        user.processType !== 'prepare_address' &&
        user.processType !== 'send_location' &&
        user.processType !== 'enter_address' &&
        user.processType !== 'select_time' &&
        user.processType !== 'recipient_number' &&
        user.processType !== 'extra_information' &&
        user.processType !== 'catalog' &&
        user.processType !== 'catalog_price=4000' &&
        user.processType !== 'catalog_price=8000' &&
        user.processType !== 'catalog_price=15000' &&
        user.processType !== 'client_number' &&
        user.processType !== 'who_is_client' &&
        user.processType !== 'postcard' &&
        user.processType !== 'prepare_payment' &&
        user.processType !== 'delete' &&
        user.processType !== 'showcase1' &&
        user.processType !== 'showcase2')
    ) {
      console.log('User is in process');

      return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    }

    if (user.processType === 'delete') {
      const index = parseInt(text, 10);
      if ((isNaN(index) && text !== '–ù–∞–∑–∞–¥') || (index <= 0 && text !== '–ù–∞–∑–∞–¥')) {
        await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:');
        return;
      }
      collectionProduct
        .find()
        .skip(index - 1)
        .limit(1)
        .toArray()
        .then(async (docs) => {
          if (docs.length > 0) {
            collectionProduct.deleteOne({ _id: docs[0]._id });
            console.log('–£–¥–∞–ª–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç —Å _id:', docs[0]._id);
            await bot.sendMessage(chatId, '–í—ã –≤–≤–µ–ª–∏ –∏–Ω–¥–µ–∫—Å, —Ç–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω. –í—ã –≤—ã—à–ª–∏ –∏–∑ –¥–µ–π—Å—Ç–≤–∏—è', {
              reply_markup: {
                resize_keyboard: true,
                one_time_keyboard: true,
              },
            });
            await collectionUser.updateOne(
              { userId },
              { $set: { isInProcess: false, processType: null } }
            );
          } else {
            console.log('–î–æ–∫—É–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
          }
        });

      return;
    }

    if (text === '–û–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω–∞' && !user.isInProcess) {
      const products = await collectionProduct.find({ photo: { $exists: true } }).toArray();

      const count = await collectionProduct.countDocuments({
        photo: { $exists: true },
      });
      if (count === 0) {
        await bot.sendMessage(chatId, '–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
        return;
      }
      const keyboardText = await products
        .slice(0, 10)
        .map((product, index) => [
          `‚Ññ${index + 1} ${product.price ? `${product.price} ‚ÇΩ` : '–ë–µ–∑ —Ü–µ–Ω—ã'}`,
        ]);
      keyboardText.push(['–ù–∞–∑–∞–¥']);
      await bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –æ–Ω–ª–∞–π–Ω-–≤–∏—Ç—Ä–∏–Ω—É!', {
        reply_markup: {
          keyboard: keyboardText,
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      const mediaGroup = await products
        .filter((product) => product.photo)
        .map((product, index) => ({
          type: 'photo',
          media: product.photo,
          caption: `‚Ññ${index + 1}: ${product.price || '–ë–µ–∑ —Ü–µ–Ω—ã'} ‚ÇΩ`,
        }))
        .slice(0, 10);

      const messagePhotos = await bot.sendMediaGroup(chatId, mediaGroup);
      console.log(
        'messagePhotos',
        messagePhotos.map((item) => item.message_id)
      );
      const photoIds = messagePhotos.map((item) => item.message_id);
      await collectionUser.updateOne(
        { userId },
        {
          $set: { processType: 'showcase', isInProcess: true, currentIndex: 0 },
          $push: {
            photo_to_delete: { $each: photoIds },
          },
        }
      );

      console.log('count', count);

      if (count > 10) {
        const keyboard = [
          {
            text: '–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ',
            callback_data: 'nextt_product_10',
          },
        ];

        const messageWelcome = await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É:',
          {
            reply_markup: {
              inline_keyboard: [keyboard],
            },
          }
        );
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: [messageWelcome.message_id],
            },
          }
        );
      }
    } else if (text.startsWith('‚Ññ') && user.processType === 'showcase') {
      const productIndex = parseInt(text.match(/‚Ññ(\d+)/)[1], 10) - 1;
      const product = await collectionProduct
        .find({ photo: { $exists: true } })
        .skip(productIndex)
        .limit(1)
        .toArray();

      if (!product.length) {
        await bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        return;
      }

      const selectedProduct = product[0];

      await collectionUser.updateOne(
        { userId },
        {
          $set: {
            selectedProduct,
            processType: 'select_date',
            price: selectedProduct.price,
            photo: selectedProduct.photo,
          },
        }
      );

      const chatId = msg.chat.id;
      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth();

      const calendar = generateCalendar(year, month);
      await bot.sendMessage(chatId, '–ë—É–∫–µ—Ç –≤—ã–±—Ä–∞–Ω!', {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
        },
      });
      const messageWithCalendar = await bot.sendMessage(
        chatId,
        'üìÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:          ',
        {
          reply_markup: {
            inline_keyboard: calendar,

            resize_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId: chatId },
        {
          $push: {
            message_to_delete: messageWithCalendar.message_id,
          },
        }
      );
    } else if (user.processType === 'prepare_address') {
      if (text === '–°–∞–º–æ–≤—ã–≤–æ–∑') {
        const availableTimes = getAvailableShippingTime(user);
        console.log(availableTimes[0][0]);

        await bot.sendMessage(
          chatId,
          'üïí *–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –≤—ã –∑–∞–±–µ—Ä—ë—Ç–µ —Ç–æ–≤–∞—Ä.*\n\n' +
            `–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∏–∂–µ.`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [...availableTimes, ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        setTimeout(async () => {
          await collectionUser.updateOne(
            { userId },
            {
              $set: {
                address: '–°–∞–º–æ–≤—ã–≤–æ–∑',
                MKAD: null,
                processType: 'select_time',
              },
            }
          );
        }, 700);
      } else if (text === '–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å') {
        await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ, –∫–∞–∫—É—é –¥–æ—Å—Ç–∞–≤–∫—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?', {
          reply_markup: {
            keyboard: [
              ['–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î ‚Äî 750 ‚ÇΩ'],
              ['–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î- –ë–ª–∏–∂–Ω–µ–µ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ ‚Äî 950 ‚ÇΩ'],
              ['–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î - –æ–±–ª–∞—Å—Ç—å ‚Äî 2000 ‚ÇΩ'],
            ],
          },
        });
      }
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—É—Ç—å —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å
      else if (
        text === '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î ‚Äî 750 ‚ÇΩ' ||
        text === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î- –ë–ª–∏–∂–Ω–µ–µ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ ‚Äî 950 ‚ÇΩ' ||
        text === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î - –æ–±–ª–∞—Å—Ç—å ‚Äî 2000 ‚ÇΩ'
      ) {
        await bot.sendMessage(
          chatId,
          '*–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:*\n\n' +
            '*–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º* (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã).\n\n' +
            '*–ü—Ä–∏–º–µ—Ä:*\n' +
            "'–ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7'.",
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        await collectionUser.updateOne({ userId }, { $set: { MKAD: text } });
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        await collectionUser.updateOne(
          { userId },
          { $set: { isInProcess: true, processType: 'enter_address' } }
        );
      }
    } else if (user.processType === 'enter_address' && text !== '–ù–∞–∑–∞–¥') {
      const validationResponse = await validateAddress(text);
      console.log(validationResponse.message, validationResponse.valid);

      if (validationResponse.valid) {
        const availableTimes = getAvailableShippingTime(user);

        await bot.sendMessage(
          chatId,
          'üìç **–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω!**\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏. ‚è∞',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [...availableTimes, ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        await collectionUser.updateOne(
          { userId },
          { $set: { address: text, processType: 'select_time' } }
        );
      } else {
        await bot.sendMessage(
          chatId,
          '‚ùå **–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω.**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å ',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
      }

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    } else if (
      (user.processType === 'select_time' && text === '9-11') ||
      (user.processType === 'select_time' && text === '12-14') ||
      (user.processType === 'select_time' && text === '15-17') ||
      (user.processType === 'select_time' && text === '18-20') ||
      (user.processType === 'select_time' &&
        text === '20-21' &&
        user.processType === 'select_time' &&
        text !== '–ù–∞–∑–∞–¥')
    ) {
      console.log(getAvailableShippingTime(user)[0][0], 'zzzww');

      if (
        getAvailableShippingTime(user)[0][0] === '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.'
      ) {
        console.log('can nto');

        return;
      }
      if (user.address === '–°–∞–º–æ–≤—ã–≤–æ–∑') {
        console.log(getAvailableShippingTime(user)[0][0], 'zzw');

        await bot.sendMessage(
          chatId,
          '‚è∞ **–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–æ.**\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üìû',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        await collectionUser.updateOne(
          { userId },
          { $set: { time: text, processType: 'client_number' } }
        );
        return;
      }

      await bot.sendMessage(
        chatId,
        '‚è∞ **–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤—ã–±—Ä–∞–Ω–æ.**\n\n–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. üìû',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );

      await collectionUser.updateOne(
        { userId },
        {
          $set: {
            time: text,
            processType: 'client_number',
          },
        }
      );
    } else if (user.processType === 'client_number' && text !== '–ù–∞–∑–∞–¥') {
      const phoneRegex = /^(\+7|8)\s?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{2}[\s.-]?\d{2}$/;
      if (!phoneRegex.test(text)) {
        await bot.sendMessage(
          chatId,
          '‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üìû',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        return;
      }
      if (user.address === '–°–∞–º–æ–≤—ã–≤–æ–∑') {
        await bot.sendMessage(
          chatId,
          'üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. \n\nüíå –°–µ–π—á–∞—Å, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ.',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ'], ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
      } else {
        await bot.sendMessage(
          chatId,
          'üì±–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. \n\n–¢–µ–ø–µ—Ä—å, —É–∫–∞–∂–∏—Ç–µ –∫—Ç–æ –ø–æ–ª—É—á–∏—Ç –∑–∞–∫–∞–∑ \n1Ô∏è‚É£  –Ø\n2Ô∏è‚É£ –î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫\n\nüì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. ',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–Ø', '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫'], ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
      }
      await collectionUser.updateOne(
        { userId },
        {
          $set: {
            clientNumber: text,
            processType: user.address === '–°–∞–º–æ–≤—ã–≤–æ–∑' ? 'postcard' : 'who_is_client',
          },
        }
      );
    } else if (
      user.processType === 'who_is_client' &&
      text !== '–ù–∞–∑–∞–¥' &&
      user.address !== '–°–∞–º–æ–≤—ã–≤–æ–∑'
    ) {
      if (text === '–Ø' || text === '1') {
        await bot.sendMessage(
          chatId,
          'üì±–í—ã —É–∫–∞–∑–∞–ª–∏ —Å–µ–±—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. \n\nüíå –°–µ–π—á–∞—Å, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ.',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ'], ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        await collectionUser.updateOne(
          { userId },
          {
            $set: {
              whoIsClient: text,
              processType: 'postcard',
            },
          }
        );
      } else if (text === '–î—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫' || text === '2') {
        await bot.sendMessage(
          chatId,
          'üì±–í—ã —É–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. \n\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ üìû',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [[''], ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        await collectionUser.updateOne(
          { userId },
          {
            $set: {
              whoIsClient: text,
              processType: 'recipient_number',
            },
          }
        );
      }
    } else if (user.processType === 'recipient_number' && text !== '–ù–∞–∑–∞–¥') {
      const phoneRegex = /^(\+7|8)\s?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{2}[\s.-]?\d{2}$/;
      if (!phoneRegex.test(text)) {
        await bot.sendMessage(
          chatId,
          '‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.**\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üìû',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );
        return;
      }
      console.log('EXTRA INFORMATION');

      await bot.sendMessage(
        chatId,
        'üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. \n\nüíå –°–µ–π—á–∞—Å, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ.',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId },
        { $set: { recipientNumber: text, processType: 'postcard' } }
      );
    } else if (user.processType === 'postcard' && text !== '–ù–∞–∑–∞–¥' && text === '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ') {
      await bot.sendMessage(
        chatId,
        '–°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. ‚ú®',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId },
        { $set: { postcard: null, processType: 'extra_information' } }
      );
    } else if (user.processType === 'postcard' && text !== '–ù–∞–∑–∞–¥' && text !== '–ü–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ') {
      await bot.sendMessage(
        chatId,
        '‚ú®–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –°–µ–π—á–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ. ‚ú® ',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'], ['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId },
        { $set: { postcard: text, processType: 'extra_information' } }
      );
    } else if (
      user.processType === 'extra_information' &&
      text !== '–ù–∞–∑–∞–¥' &&
      text !== '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'
    ) {
      await bot.sendMessage(
        chatId,
        '‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –æ–ø–ª–∞—Ç–µ. ‚ú®',
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [[' –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ'], [' –ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne(
        { userId },
        { $set: { extraInformation: text, processType: 'prepare_payment' } }
      );
    } else if (
      user.processType === 'extra_information' &&
      text === '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ' &&
      text !== '–ù–∞–∑–∞–¥'
    ) {
      const merchantLogin = 'FloriMondibot';
      const password1 = 'lLj8x1UR4zvz7M7WezHS';
      const invId = Math.floor(100000 + Math.random() * 900000);

      const extraPrice =
        user && (await user.MKAD) === '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î ‚Äî 750 ‚ÇΩ'
          ? 750
          : user.MKAD === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î- –ë–ª–∏–∂–Ω–µ–µ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ ‚Äî 950 ‚ÇΩ'
          ? 950
          : user.MKAD === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î - –æ–±–ª–∞—Å—Ç—å ‚Äî 2000 ‚ÇΩ'
          ? 2000
          : 0;
      const outSum = (await user.price) + extraPrice;

      const link = await generatePaymentLink(merchantLogin, password1, invId, outSum);

      console.log(link);

      await collectionUser.updateOne({ userId }, { $set: { invId, processType: 'payment' } });
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        chatId,
        `üí≥ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞* üí≥\n\n` +
          `üì¶ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: *${await user.price}‚ÇΩ*\n` +
          `üöö –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: *${extraPrice}‚ÇΩ*\n` +
          `üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏: *${outSum}‚ÇΩ*\n\n` +
          `[üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑](${link})\n\n` + // –°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞
          `‚úÖ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
    } else if (
      user.processType === 'prepare_payment' &&
      text === '–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ' &&
      text !== '–ù–∞–∑–∞–¥'
    ) {
      const merchantLogin = 'FloriMondibot';
      const password1 = 'lLj8x1UR4zvz7M7WezHS';
      const invId = Math.floor(100000 + Math.random() * 900000);

      const extraPrice =
        user && (await user.MKAD) === '–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î ‚Äî 750 ‚ÇΩ'
          ? 750
          : user.MKAD === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î- –ë–ª–∏–∂–Ω–µ–µ –ü–æ–¥–º–æ—Å–∫–æ–≤—å–µ ‚Äî 950 ‚ÇΩ'
          ? 950
          : user.MKAD === '–ö—É—Ä—å–µ—Ä –∑–∞ –ú–ö–ê–î - –æ–±–ª–∞—Å—Ç—å ‚Äî 2000 ‚ÇΩ'
          ? 2000
          : 0;
      const outSum = (await user.price) + extraPrice;

      const link = await generatePaymentLink(merchantLogin, password1, invId, outSum);

      console.log(link);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.sendMessage(
        chatId,
        `üí≥ *–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞* üí≥\n\n` +
          `üì¶ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: *${await user.price}‚ÇΩ*\n` +
          `üöö –¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: *${extraPrice}‚ÇΩ*\n` +
          `üí∞ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏: *${outSum}‚ÇΩ*\n\n` +
          `[üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑](${link})\n\n` + // –°–∫—Ä—ã—Ç–∞—è —Å—Å—ã–ª–∫–∞
          `‚úÖ –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`,
        {
          parse_mode: 'Markdown',
          reply_markup: {
            keyboard: [['–ù–∞–∑–∞–¥']],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        }
      );
      await collectionUser.updateOne({ userId }, { $set: { invId, processType: 'payment' } });
      return;
    } else if (text !== '–ù–∞–∑–∞–¥') {
      //   await bot.sendMessage(
      //     chatId,
      //     "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."
      //   );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

bot.on('message', async (msg) => {
  try {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;
    if (!collectionUser) {
      return;
    }
    const chatType = msg.chat.type; // 'private', 'group', 'supergroup'
    if (chatType === 'supergroup') {
      return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ
    }
    const user = await collectionUser.findOne({ userId });
    if (
      user &&
      user.isInProcess &&
      user.processType !== 'about' &&
      user.processType !== 'site' &&
      user.processType !== 'catalog' &&
      user.processType !== 'catalog_price=4000' &&
      user.processType !== 'catalog_price=8000' &&
      user.processType !== 'catalog_price=15000' &&
      user.processType !== 'map'
    ) {
      return;
    } else if (text === '–û –Ω–∞—Å') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'about' } }
      );
      const text = `
‚ú® Flori Mondi ‚Äì –≤–∞—à –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π —Å–∞–ª–æ–Ω —Å –±–µ–∑—É–ø—Ä–µ—á–Ω—ã–º —Å–µ—Ä–≤–∏—Å–æ–º, –±—ã—Å—Ç—Ä—ã–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏ –∏ —Ä–æ—Å–∫–æ—à–Ω—ã–º –±—É—Ç–∏–∫–æ–º –≤ —Å–∞–º–æ–º —Å–µ—Ä–¥—Ü–µ –ú–æ—Å–∫–≤—ã.

üå∑ –ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –±—É–∫–µ—Ç—ã, –∞ –º–æ–º–µ–Ω—Ç—ã —Å—á–∞—Å—Ç—å—è, –≥–¥–µ –∫–∞–∂–¥—ã–π –ª–µ–ø–µ—Å—Ç–æ–∫ –ø—Ä–æ–ø–∏—Ç–∞–Ω –∑–∞–±–æ—Ç–æ–π. –ù–∞—à–∏ —Ñ–ª–æ—Ä–∏—Å—Ç—ã —Å–¥–µ–ª–∞–ª–∏ –≤—Å—ë, —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Å—Ç–∞–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É–¥–æ–±–Ω—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤–∞—Å.

üå∏ –° –Ω–∞–º–∏ –≤—ã –∑–∞–±—É–¥–µ—Ç–µ –æ –≤–æ–ª–Ω–µ–Ω–∏—è—Ö: —Å–≤–µ–∂–µ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤, —Ç–æ—á–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –±–µ–∑—É–ø—Ä–µ—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ ‚Äî —ç—Ç–æ –Ω–∞—à–∞ –∑–æ–Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏. –ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –º—ã –≤—Å–µ–≥–¥–∞ —Å–æ–≥–ª–∞—Å—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ –±—É–∫–µ—Ç–∞ —Å –≤–∞–º–∏ –∏ –≥–æ—Ç–æ–≤—ã —É—á–µ—Å—Ç—å –ª—é–±—ã–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è.

üíå –•–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –∫ –±—É–∫–µ—Ç—É —à–æ–∫–æ–ª–∞–¥–∫—É, –ø–æ–¥–ø–∏—Å–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç–∫—É –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ? –î–ª—è –Ω–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–∏–º—ã—Ö –∑–∞–¥–∞—á! –ú—ã –≥–æ—Ä–¥–∏–º—Å—è —Ç–µ–º, —á—Ç–æ –º–æ–∂–µ–º –≤–æ–ø–ª–æ—â–∞—Ç—å –≤ –∂–∏–∑–Ω—å –¥–∞–∂–µ —Å–∞–º—ã–µ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã, –¥–æ–∫–∞–∑—ã–≤–∞—è –≤–∞–º, —á—Ç–æ –≤—ã–±–æ—Ä Flori Mondi ‚Äî —ç—Ç–æ –≤—Å–µ–≥–¥–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

üåü –ú—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–¥–æ—Å—Ç—å –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –±–ª–∏–∑–∫–∏—Ö.
`;
      await bot.sendMessage(chatId, text, {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else if (text === '–ù–∞—à —Å–∞–π—Ç') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'site' } }
      );

      await bot.sendMessage(chatId, 'www.florimondi.ru/about/', {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else if (text === '–ù–∞—à –∫–∞—Ç–∞–ª–æ–≥') {
      const slidesFor4k = await collectionCategory.findOne({ 'categoryInfo.id': '1' });
      const slidesFor4k = await collectionCategory.findOne({ 'categoryInfo.id': '1' });
      const slidesFor4k = await collectionCategory.findOne({ 'categoryInfo.id': '1' });

      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'catalog' } }
      );

      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–∞—Ç–∞–ª–æ–≥ ', {
        reply_markup: {
          keyboard: [
            [slidesFor4k.categoryInfo.name, '–ö–æ—Ä–∑–∏–Ω—ã'],
            ['–†–∞—Å–∫–∏–¥–∏—Å—Ç—ã–µ –±—É–∫–µ—Ç—ã', '–ö–æ—Ä–æ–±–∫–∏'],
            ['–ù–∞–∑–∞–¥'],
          ],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    } else if (text === '–ú—ã –Ω–∞ –∫–∞—Ä—Ç–µ') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'map' } }
      );
      await bot.sendLocation(chatId, 55.743139, 37.633583);
      await bot.sendMessage(chatId, '–ú–æ—Å–∫–≤–∞, –†—É–Ω–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ 8, —Å—Ç—Ä–æ–µ–Ω–∏–µ 1', {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
    }
    const isFirst = await collectionCategory.findOne({
      'categoryInfo.id': '1',
      'categoryInfo.name': text,
    });

    const isSecond = await collectionCategory.findOne({
      'categoryInfo.id': '2',
      'categoryInfo.name': text,
    });
    const isThird = await collectionCategory.findOne({
      'categoryInfo.id': '3',
      'categoryInfo.name': text,
    });

    if (
      isFirst !== null ||
      (isFirst !== undefined && undefined && user.processType === 'catalog')
    ) {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'catalog_price=4000' } }
      );

      await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥: ${isFirst.categoryInfo.name}`, {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
      async function sendCatalog() {
        const slidesFor4k = await collectionCategory.findOne({ 'categoryInfo.id': '1' });
        console.log(slidesFor4k, '1');

        await slidesFor4k.categoryItem.forEach(async (item, index) => {
          const sentMessage = await bot.sendPhoto(chatId, item.photo, {
            caption: item.caption,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üõí –ö—É–ø–∏—Ç—å',
                    callback_data: `vitrina_4k_${item.itemId}`,
                  },
                ],
              ],
            },
          });
          await collectionUser.updateOne(
            { userId },
            { $push: { photo_to_delete: sentMessage.message_id } }
          );
        });
      }

      await sendCatalog();
    }
    if (isSecond !== null && isSecond !== undefined && user.processType === 'catalog') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'catalog_price=8000' } }
      );
      await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥: ${isSecond.categoryInfo.name}`, {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      async function sendCatalog() {
        const slidesFor7k = await collectionCategory.findOne({ 'categoryInfo.id': '2' });
        slidesFor7k.categoryItem.forEach(async (item, index) => {
          const sentMessage = await bot.sendPhoto(chatId, item.photo, {
            caption: item.caption,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üõí –ö—É–ø–∏—Ç—å',
                    callback_data: `vitrina_7k_${item.itemId}`,
                  },
                ],
              ],
            },
          });
          await collectionUser.updateOne(
            { userId },
            { $push: { photo_to_delete: sentMessage.message_id } }
          );
        });
      }

      await sendCatalog();
    }
    if (isThird !== null && isThird !== undefined && user.processType === 'catalog') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'catalog_price=10000' } }
      );
      await bot.sendMessage(chatId, `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥: ${isThird.categoryInfo.name}`, {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      async function sendCatalog() {
        const slidesFor10k = await collectionCategory.findOne({ 'categoryInfo.id': '3' });
        slidesFor10k.categoryItem.forEach(async (item, index) => {
          const sentMessage = await bot.sendPhoto(chatId, item.photo, {
            caption: item.caption,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üõí –ö—É–ø–∏—Ç—å',
                    callback_data: `vitrina_10k_${item.itemId}`,
                  },
                ],
              ],
            },
          });
          await collectionUser.updateOne(
            { userId },
            { $push: { photo_to_delete: sentMessage.message_id } }
          );
        });
      }
      await sendCatalog();
    } else if (text === '–†–∞—Å–∫–∏–¥–∏—Å—Ç—ã–µ –±—É–∫–µ—Ç—ã' && user.processType === 'catalog') {
      await collectionUser.updateOne(
        { userId },
        { $set: { isInProcess: true, processType: 'catalog_price=10000++' } }
      );
      await bot.sendMessage(chatId, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–∞–ª–æ–≥: –†–∞—Å–∫–∏–¥–∏—Å—Ç—ã–µ –±—É–∫–µ—Ç—ã', {
        reply_markup: {
          keyboard: [['–ù–∞–∑–∞–¥']],
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      async function sendCatalog() {
        slidesFor10moreK.forEach(async (item, index) => {
          const sentMessage = await bot.sendPhoto(chatId, item.photo, {
            caption: item.caption,
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'üõí –ö—É–ø–∏—Ç—å',
                    callback_data: `vitrina_14k_${index}`,
                  },
                ],
              ],
            },
          });
          await collectionUser.updateOne(
            { userId },
            { $push: { photo_to_delete: sentMessage.message_id } }
          );
        });
      }
      await sendCatalog();
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è

bot.on('callback_query', async (query) => {
  try {
    if (!collectionUser) {
      return;
    }
    const user = await collectionUser.findOne({ userId: query.from.id });
    if (!user) {
      return;
    }
    const chatId = query.message.chat.id;
    const callback_data = query.data;
    if (callback_data === 'nextt_product_10') {
      const products = await collectionProduct.find({ photo: { $exists: true } }).toArray();
      const count = products.length;

      if (user.photo_to_delete) {
        console.log('—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞ –∑–∞—Ö–æ–¥–µ 2');

        await user.photo_to_delete.forEach(async (photoId) => {
          await bot.deleteMessage(chatId, photoId);
        });
      }

      if (Array.isArray(user.message_to_delete) && user.message_to_delete.length > 0) {
        for (const messageId of user.message_to_delete) {
          try {
            await bot.deleteMessage(chatId, messageId);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è2 ${messageId}:`, error.message);
          }
        }
      } else if (typeof user.message_to_delete === 'number') {
        try {
          await bot.deleteMessage(chatId, user.message_to_delete);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è2 ${user.message_to_delete}:`, error.message);
        }
      }

      await collectionUser.updateOne(
        { userId: query.from.id },
        { $set: { message_to_delete: [] } }
      );
      // –°–ª–∞–π–¥ 10-20 —Ç–æ–≤–∞—Ä–æ–≤
      const mediaGroup = await products
        .filter((product) => product.photo)
        .map((product, index) => ({
          type: 'photo',
          media: product.photo,
          caption: `‚Ññ${index + 11}: ${product.price || '–ë–µ–∑ —Ü–µ–Ω—ã'} ‚ÇΩ`,
        }))
        .slice(10, 20);
      const keyboardText = await products
        .slice(10, 20)
        .map((product, index) => [
          `‚Ññ${index + 11} ${product.price ? `${product.price} ‚ÇΩ` : '–ë–µ–∑ —Ü–µ–Ω—ã'}`,
        ]);
      keyboardText.push(['–ù–∞–∑–∞–¥']);
      const messagePhotos = await bot.sendMediaGroup(chatId, mediaGroup);
      const messagePhotoId = messagePhotos.map((item) => item.message_id);

      const keyboard = [
        {
          text: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥',
          callback_data: 'back_from_showcase',
        },
        {
          text: '–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ',
          callback_data: 'nextt_product_20',
        },
      ];
      const keyboard2 = [
        {
          text: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥',
          callback_data: 'back_from_showcase',
        },
      ];
      const messagesId = [];
      const messageWelcome = await bot.sendMessage(chatId, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥.', {
        reply_markup: {
          keyboard: keyboardText,
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      messagesId.push(messageWelcome.message_id);
      if (count >= 21) {
        const messageWelcome2 = await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É:',
          {
            reply_markup: {
              inline_keyboard: [keyboard],
            },
          }
        );
        messagesId.push(messageWelcome2.message_id);
      }

      if (count < 21) {
        const messageWelcome2 = await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–ª–∞–π–¥—É:',
          {
            reply_markup: {
              inline_keyboard: [keyboard2],
            },
          }
        );
        messagesId.push(messageWelcome2.message_id);
      }

      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            currentShow: 2,
            photo_to_delete: messagePhotoId,
            message_to_delete: messagesId,
          },
        }
      );
      return;
    }
    if (callback_data === 'nextt_product_20') {
      if (user.photo_to_delete) {
        await user.photo_to_delete.forEach(async (photoId) => {
          await bot.deleteMessage(chatId, photoId);
          await collectionUser.updateOne({ userId: chatId }, { $set: { photo_to_delete: [] } });
        });
      }
      const products = await collectionProduct.find({ photo: { $exists: true } }).toArray();

      if (!user.message_to_delete) {
        console.log('message_to_delete –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        return;
      }
      if (Array.isArray(user.message_to_delete) && user.message_to_delete.length > 0) {
        for (const messageId of user.message_to_delete) {
          try {
            await bot.deleteMessage(chatId, messageId);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${messageId}:`, error.message);
          }
        }
      } else if (typeof user.message_to_delete === 'number') {
        try {
          await bot.deleteMessage(chatId, user.message_to_delete);
        } catch (error) {
          console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${user.message_to_delete}:`, error.message);
        }
      }

      const keyboard = [
        {
          text: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥',
          callback_data: 'back_from_showcase',
        },
      ];

      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            currentShow: 3,
            message_to_delete: [],
          },
        }
      );
      // –°–ª–∞–π–¥ 10-20 —Ç–æ–≤–∞—Ä–æ–≤
      const mediaGroup = await products
        .filter((product) => product.photo)
        .map((product, index) => ({
          type: 'photo',
          media: product.photo,
          caption: `‚Ññ${index + 11}: ${product.price || '–ë–µ–∑ —Ü–µ–Ω—ã'} ‚ÇΩ`,
        }))
        .slice(20, 30);
      const keyboardText = await products
        .slice(20, 30)
        .map((product, index) => [
          `‚Ññ${index + 21} ${product.price ? `${product.price} ‚ÇΩ` : '–ë–µ–∑ —Ü–µ–Ω—ã'}`,
        ]);
      keyboardText.push(['–ù–∞–∑–∞–¥']);

      const messagePhotos = await bot.sendMediaGroup(chatId, mediaGroup);
      const messageWelcome1 = await bot.sendMessage(chatId, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —Ç—Ä–µ—Ç–∏–π —Å–ª–∞–π–¥.', {
        reply_markup: {
          keyboard: keyboardText,
          resize_keyboard: true,
          one_time_keyboard: true,
        },
      });
      const messageWelcome2 = await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:', {
        reply_markup: {
          inline_keyboard: [keyboard],
        },
      });

      setTimeout(() => {
        collectionUser.updateOne(
          { userId: query.from.id },
          {
            $push: {
              photo_to_delete: {
                $each: messagePhotos.map((item) => item.message_id),
              },
            },
          }
        );
      }, 1000);

      const messagesId = [messageWelcome1.message_id, messageWelcome2.message_id];
      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            message_to_delete: messagesId,
          },
        }
      );
      return;
    }
    if (callback_data === 'back_from_showcase') {
      if (user.currentShow === 2) {
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              currentShow: 1,
            },
          }
        );
        if (user.message_to_delete) {
          await user.message_to_delete.forEach(async (messageId) => {
            await bot.deleteMessage(chatId, messageId);
          });
        }

        if (user.photo_to_delete) {
          await user.photo_to_delete.forEach(async (photoId) => {
            await bot.deleteMessage(chatId, photoId);
            await collectionUser.updateOne({ userId: chatId }, { $set: { photo_to_delete: [] } });
          });
        }
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: [],
            },
          }
        );
        const products = await collectionProduct.find({ photo: { $exists: true } }).toArray();

        if (products.length === 0) {
          await bot.sendMessage(chatId, '–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
          return;
        }

        const mediaGroup = products
          .filter((product) => product.photo)
          .map((product, index) => ({
            type: 'photo',
            media: product.photo,
            caption: `‚Ññ${index + 1}: ${product.price || '–ë–µ–∑ —Ü–µ–Ω—ã'} ‚ÇΩ`,
          }))
          .slice(0, 10);

        const messagePhotos = await bot.sendMediaGroup(chatId, mediaGroup);
        const messagePhotoId = messagePhotos.map((item) => item.message_id);
        console.log('messagePhotoId', messagePhotoId);

        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              processType: 'showcase',
            },
          }
        );

        const keyboard = [
          {
            text: '–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ',
            callback_data: 'nextt_product_10',
          },
        ];
        const keyboardText = products
          .slice(0, 10)
          .map((product, index) => [
            `‚Ññ${index + 1} ${product.price ? `${product.price} ‚ÇΩ` : '–ë–µ–∑ —Ü–µ–Ω—ã'}`,
          ]);
        keyboardText.push(['–ù–∞–∑–∞–¥']);
        const messageWelcome1 = await bot.sendMessage(chatId, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥.', {
          reply_markup: {
            keyboard: keyboardText,
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        const messageWelcome2 = await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É:',
          {
            reply_markup: {
              inline_keyboard: [keyboard],
            },
          }
        );
        const messagesId = [messageWelcome1.message_id, messageWelcome2.message_id];
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: messagesId,
              photo_to_delete: messagePhotoId,
            },
          }
        );
        return;
      }
      if (user.currentShow === 3) {
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              currentShow: 2,
            },
          }
        );
        if (user.photo_to_delete) {
          await user.photo_to_delete.forEach(async (photoId) => {
            await bot.deleteMessage(chatId, photoId);
            await collectionUser.updateOne({ userId: chatId }, { $set: { photo_to_delete: [] } });
          });
        }
        if (user.message_to_delete) {
          await user.message_to_delete.forEach(async (messageId) => {
            await bot.deleteMessage(chatId, messageId);
          });
        }

        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: [],
            },
          }
        );
        const products = await collectionProduct.find({ photo: { $exists: true } }).toArray();

        if (products.length === 0) {
          await bot.sendMessage(chatId, '–ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.');
          return;
        }

        const mediaGroup = await products
          .filter((product) => product.photo)
          .map((product, index) => ({
            type: 'photo',
            media: product.photo,
            caption: `‚Ññ${index + 11}: ${product.price || '–ë–µ–∑ —Ü–µ–Ω—ã'} ‚ÇΩ`,
          }))
          .slice(10, 20);

        const messagePhotos = await bot.sendMediaGroup(chatId, mediaGroup);
        console.log(
          'messagePhotos',
          messagePhotos.map((item) => item.message_id)
        );
        const photoIds = messagePhotos.map((item) => item.message_id);
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              processType: 'showcase',
            },
            $push: {
              photo_to_delete: { $each: photoIds },
            },
          }
        );

        const keyboard = [
          {
            text: '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥',
            callback_data: 'back_from_showcase',
          },
          {
            text: '–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–ª—å—à–µ',
            callback_data: 'nextt_product_10',
          },
        ];
        const keyboardText = await products
          .slice(10, 20)
          .map((product, index) => [
            `‚Ññ${index + 11} ${product.price ? `${product.price} ‚ÇΩ` : '–ë–µ–∑ —Ü–µ–Ω—ã'}`,
          ]);
        keyboardText.push(['–ù–∞–∑–∞–¥']);
        const messageWelcome1 = await bot.sendMessage(chatId, '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å–ª–∞–π–¥.', {
          reply_markup: {
            keyboard: keyboardText,
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
        const messageWelcome2 = await bot.sendMessage(
          chatId,
          '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É:',
          {
            reply_markup: {
              inline_keyboard: [keyboard],
            },
          }
        );
        const messagesId = [messageWelcome1.message_id, messageWelcome2.message_id];
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: messagesId,
            },
          }
        );
        return;
      }
    }
    console.log('callback_data', callback_data);

    if (
      callback_data.startsWith('date_') ||
      callback_data.startsWith('prev_') ||
      callback_data.startsWith('next_') ||
      callback_data === 'ignore'
    ) {
      if (callback_data.startsWith('date_')) {
        const rawDate = callback_data.split('_')[1]; // "2025-02-06"

        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –≥–æ–¥, –º–µ—Å—è—Ü, –¥–µ–Ω—å
        const [year, month, day] = rawDate.split('-');

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ DD.MM.YYYY
        const formattedMonth = String(month).padStart(2, '0');
        const formattedDay = String(day).padStart(2, '0');
        console.log(formattedDay, formattedMonth, year);

        const formattedDate = `${formattedDay}.${formattedMonth}.${year}`;
        await bot.sendMessage(
          chatId,
          `–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: *${formattedDate}*. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n\n` +
            `1Ô∏è‚É£ *–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å:* –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º* (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –¢–≤–µ—Ä—Å–∫–∞—è —É–ª–∏—Ü–∞, 7). \n\n` +
            `‚ÑπÔ∏è *–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:* –ú—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–ª—å–∫–æ –≤ –ú–æ—Å–∫–≤–µ –∏ –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏.\n\n` +
            `2Ô∏è‚É£ *–°–∞–º–æ–≤—ã–≤–æ–∑*: –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É –ú–æ—Å–∫–≤–∞, –†—É–Ω–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫ 8, —Å—Ç—Ä–æ–µ–Ω–∏–µ 1.\n` +
            `–î–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–π –æ–ø—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ "–°–∞–º–æ–≤—ã–≤–æ–∑", –∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞.\n\n`,
          {
            parse_mode: 'Markdown',
            reply_markup: {
              keyboard: [['–í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å', '–°–∞–º–æ–≤—ã–≤–æ–∑'], ['–ù–∞–∑–∞–¥']],
              resize_keyboard: true,
              one_time_keyboard: true,
            },
          }
        );

        bot.deleteMessage(chatId, query.message.message_id);
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              selectedDate: formattedDate,
              processType: 'prepare_address',
              message_to_delete: null,
            },
          }
        );
      } else if (callback_data.startsWith('prev_') || callback_data.startsWith('next_')) {
        const [action, year, month] = callback_data.split('_');
        let newYear = parseInt(year);
        let newMonth = parseInt(month);

        if (action === 'prev') {
          newMonth -= 1;
          if (newMonth < 0) {
            newMonth = 11;
            newYear -= 1;
          }
        } else if (action === 'next') {
          newMonth += 1;
          if (newMonth > 11) {
            newMonth = 0;
            newYear += 1;
          }
        }

        const calendar = generateCalendar(newYear, newMonth);

        await bot.editMessageReplyMarkup(
          {
            inline_keyboard: calendar,
          },

          {
            chat_id: chatId,
            message_id: query.message.message_id,
          }
        );
        await collectionUser.updateOne(
          { userId: chatId },
          {
            $set: {
              message_to_delete: query.message.message_id,
            },
          }
        );
      } else if (callback_data === 'ignore') {
        bot.answerCallbackQuery(query.id, {
          text: '–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞.',
        });
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
    }

    //VITRINAA
    const vitrinaData = parseCallbackData(callback_data);

    if (!vitrinaData) return;
    if (vitrinaData.price === '4') {
      const selectedProduct = await collectionCategory.findOne({
        'categoryInfo.id': '1',
        'categoryItem.itemId': vitrinaData.id,
      });

      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth();

      const calendar = generateCalendar(year, month);

      const price = await selectedProduct.categoryItem
        .find((el) => el.itemId === vitrinaData.id)
        .caption.match(/–¶–µ–Ω–∞:\s*(.+)/);
      const photo = await selectedProduct.categoryItem.find((el) => el.itemId === vitrinaData.id)
        .photo;
      const numericPrice = await parseInt(price[1].replace(/\s|‚ÇΩ/g, ''), 10);
      if (user.message_to_delete) {
        await bot.deleteMessage(chatId, user.message_to_delete);
      }
      const sentMessage = await bot.sendMessage(
        chatId,
        'üìÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:',
        {
          reply_markup: {
            inline_keyboard: calendar,
          },
        }
      );
      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            isInProcess: true,
            processType: 'select_date',
            photo: photo,
            message_to_delete: sentMessage.message_id,
            price: numericPrice,
          },
        }
      );
    } else if (vitrinaData.price === '7') {
      const selectedProduct = await collectionCategory.findOne({
        'categoryInfo.id': '2',
        'categoryItem.itemId': vitrinaData.id,
      });

      console.log('vitrunamId', vitrinaData.id);

      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth();

      const calendar = generateCalendar(year, month);

      const price = await selectedProduct.categoryItem
        .find((el) => el.itemId === vitrinaData.id)
        .caption.match(/–¶–µ–Ω–∞:\s*(.+)/);
      const numericPrice = await parseInt(price[1].replace(/\s|‚ÇΩ/g, ''), 10);

      const photo = await selectedProduct.categoryItem.find((el) => el.itemId === vitrinaData.id)
        .photo;

      if (user.message_to_delete) {
        await bot.deleteMessage(chatId, user.message_to_delete);
      }
      const sentMessage = await bot.sendMessage(
        chatId,
        'üìÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:',
        {
          reply_markup: {
            inline_keyboard: calendar,
          },
        }
      );
      console.log('finally price,', numericPrice);

      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            isInProcess: true,
            processType: 'select_date',
            photo: photo,
            message_to_delete: sentMessage.message_id,
            price: numericPrice,
          },
        }
      );
      console.log('selectedProduct', selectedProduct);
    } else if (vitrinaData.price === '10') {
      const selectedProduct = await collectionCategory.findOne({
        'categoryInfo.id': '3',
        'categoryItem.itemId': vitrinaData.id,
      });

      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth();

      const calendar = generateCalendar(year, month);

      const price = await selectedProduct.categoryItem
        .find((el) => el.itemId === vitrinaData.id)
        .caption.match(/–¶–µ–Ω–∞:\s*(.+)/);
      const numericPrice = await parseInt(price[1].replace(/\s|‚ÇΩ/g, ''), 10);
      const photo = await selectedProduct.categoryItem.find((el) => el.itemId === vitrinaData.id)
        .photo;
      console.log('selectedProduct', selectedProduct);
      if (user.message_to_delete) {
        await bot.deleteMessage(chatId, user.message_to_delete);
      }

      const sentMessage = await bot.sendMessage(
        chatId,
        'üìÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:',
        {
          reply_markup: {
            inline_keyboard: calendar,
          },
        }
      );
      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            isInProcess: true,
            processType: 'select_date',
            photo: photo,
            message_to_delete: sentMessage.message_id,
            price: numericPrice,
          },
        }
      );
      console.log('selectedProduct', selectedProduct);
    } else if (vitrinaData.price === '14') {
      const selectedProduct = slidesFor10moreK[vitrinaData.lastNum];
      console.log('selectedProduct', selectedProduct);
      const now = new Date();
      const year = now.getFullYear();
      const month = now.getMonth();

      const calendar = generateCalendar(year, month);

      const price = selectedProduct.caption.match(/–¶–µ–Ω–∞:\s*(.+)/);
      console.log('selectedProduct', selectedProduct);
      const numericPrice = await parseInt(price[1].replace(/\s|‚ÇΩ/g, ''), 10);
      if (user.message_to_delete) {
        await bot.deleteMessage(chatId, user.message_to_delete);
      }

      const sentMessage = await bot.sendMessage(
        chatId,
        'üìÖ–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –≤–∞–º –¥–∞—Ç—É:',
        {
          reply_markup: {
            inline_keyboard: calendar,
          },
        }
      );
      await collectionUser.updateOne(
        { userId: chatId },
        {
          $set: {
            isInProcess: true,
            processType: 'select_date',
            photo: selectedProduct.photo,
            message_to_delete: sentMessage.message_id,
            price: numericPrice,
          },
        }
      );
    }
  } catch (e) {
    console.log(e);
  }
});

const slidesFor10moreK = [
  {
    photo:
      'https://florimondi.ru/upload/resize_cache/webp/iblock/7fe/y5oxh2n0nw3ifo85d6flb3onevhzt15v.webp',
    caption: 'üå∏ –ú–æ–Ω–æ–±—É–∫–µ—Ç –∏–∑ –∫—É—Å—Ç–æ–≤–æ–π –ø–∏–æ–Ω–æ–≤–∏–¥–Ω–æ–π —Ä–æ–∑—ã –∏ –≤–µ—Ç–æ—á–µ–∫ —ç–≤–∫–∞–ª–∏–ø—Ç–∞ \nüí∞ –¶–µ–Ω–∞: 3 990 ‚ÇΩ',
  },
  {
    photo:
      'https://florimondi.ru/upload/resize_cache/webp/iblock/718/leokgv9ajcxhppm6rbp54zy8k1ebko96.webp',
    caption: 'üíê –ë—É–∫–µ—Ç —Å —Ä–æ–∑–æ–π –í–∞–π—Ç –û\'–•–∞—Ä–∞ "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π" \nüí∞ –¶–µ–Ω–∞: 4 290 ‚ÇΩ',
  },
  {
    photo:
      'https://florimondi.ru/upload/resize_cache/webp/iblock/706/m1wnj9peusz3ji4hlwe8hjl79igblbzv.webp',
    caption: 'üéÅ –ê–≤—Ç–æ—Ä—Å–∫–∏–π –±—É–∫–µ—Ç –∏–∑ —Å–∞–¥–æ–≤–æ–π —Ä–æ–∑—ã –∏ –Ω–∞—Ä—Ü–∏—Å—Å–æ–≤ "–î–∏–∫–æ–≤–∏–Ω–Ω—ã–π". \nüí∞ –¶–µ–Ω–∞: 4 590 ‚ÇΩ',
  },
  {
    photo:
      'https://florimondi.ru/upload/resize_cache/webp/iblock/fa6/x1c95xh7fbaysgmnxo0v7usmusenv6km.webp',
    caption: 'üéÅ –†–∞—Å–∫–∏–¥–∏—Å—Ç—ã–π –±—É–∫–µ—Ç —Å –ª–∏–∑–∏–∞–Ω—Ç—É—Å–æ–º –∏ –∫—É—Å—Ç–æ–≤–æ–π –ø–∏–æ–Ω–æ–≤–∏–¥–Ω–æ–π —Ä–æ–∑–æ–π. \nüí∞ –¶–µ–Ω–∞: 4 990 ‚ÇΩ',
  },
];
function parseCallbackData(callbackData) {
  const match = callbackData.match(/^vitrina_(\d+)\+?k_(\d+)$/);
  if (!match) return null;

  const price = match[1]; // –ó–Ω–∞—á–µ–Ω–∏–µ –º–µ–∂–¥—É vitrina_ –∏ _k
  const id = match[2]; // –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ

  return { price, id };
}

app.listen(3003, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${3000}`);
});
